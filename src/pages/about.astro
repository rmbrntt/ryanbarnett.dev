---
import json from '../content/_skills.json';
import BaseLayout from '../layouts/BaseLayout.astro';

import ContactCTA from '../components/ContactCTA.astro';
import Hero from '../components/Hero.astro';
import Grid from '../components/Grid.astro';

interface SkillObject {
  Domain: string;
  Type: string;
  Skill: string;
  Expertise: string;
  Importance: string;
}

type ExistingArray = SkillObject[];

const existingArray: ExistingArray = json;

type Skill = {
  Skill: string;
  Expertise: string;
  Importance: string;
};

type Type = {
  [key: string]: Skill[];
};

type Domain = {
  [key: string]: Type;
};

const newStructure: Domain = {};


existingArray.forEach((skill) => {
  if (!newStructure[skill.Domain]) {
    newStructure[skill.Domain] = {};
  }

  if (!newStructure[skill.Domain][skill.Type]) {
    newStructure[skill.Domain][skill.Type] = [];
  }

  newStructure[skill.Domain][skill.Type].push({
    Skill: skill.Skill,
    Expertise: skill.Expertise,
    Importance: skill.Importance,
  });
});


interface DomainType {
    [key: string]: TypeArray;
}

interface TypeArray {
    [key: string]: SkillArray;
}

interface SkillArray {
    Skill: string;
    Expertise: Expertise;
    Importance: Importance;
}

type Expertise = "Expert" | "Advanced" | "Intermediate" | "Beginner";
type Importance = "High" | "Medium" | "Low";

type SortedMatrix = {
  [key in Domain]?: {
    [key in Type]?: SkillArray[]
  }
}
type sortKey = "Skill" | "Expertise" | "Importance";


/**
 * This function takes in the newStructure and the sortKey as inputs, and returns a new sorted sortedMatrix object. It sorts the domains and types by their keys, and sorts the skills based on the sortKey provided. The comparison is done using the localeCompare method, which compares two strings based on the locale and returns a value indicating their sort order. The default case returns 0, meaning the order of the skills remains unchanged.
 */
const sortSkillsMatrix = (newStructure: Domain, sortKey: sortKey) => {
  const sortedMatrix: DomainType = {};
  Object.keys(newStructure).sort().forEach(domain => {
    sortedMatrix[domain] = {};
    Object.keys(newStructure[domain]).sort().forEach(type => {
      sortedMatrix[domain][type] = newStructure[domain][type].sort((a, b) => {
        switch (sortKey) {
          case 'Skill':
            return a.Skill.localeCompare(b.Skill);
          case 'Expertise':
            return a.Expertise.localeCompare(b.Expertise);
          case 'Importance':
            return a.Importance.localeCompare(b.Importance);
          default:
            return 0;
        }
      });
    });
  });
  return sortedMatrix;
}

/** 
 * In this example, the skills matrix will be sorted by importance. You can replace 'Importance' with any of the other keys to sort by a different key.
 *
 */
const sortedSkillsMatrix = sortSkillsMatrix(newStructure, 'Importance');

---

<BaseLayout title="About | Ryan Barnett" description="About Ryan Barnett">
	<div class="stack gap-20">
		<main class="wrapper about">
			<Hero
				title="About"
				tagline="Thanks for stopping by. Read below to learn more about myself and my background."
			>
				<img
					width="1553"
					height="873"
					src="/assets/open-potential.jpg"
					alt="Ryan Barnett's generative art depicting coding potential through rainbows, butterflies, and flowers"
				/>
			</Hero>

			<section>
				<h2 class="section-title">Background</h2>
				<div class="grid grid-flow-row gap-4 auto-rows-max">
					<p>
						As a seasoned technology leader nearing a decade of experience in the tech industry, I bring a unique combination of technical expertise and leadership skills to the table. My background in both start-up and enterprise environments has given me a well-rounded perspective and a deep understanding of the latest technologies and industry best practices.
					</p>
					<p>
						I have honed skills in building developer tooling, delivering customer experience projects, and designing systems that meet the needs of various user personas. My extensive experience in web delivery practices, API and backend development, and frontend development has been demonstrated on digital experience platforms serving over 1.5 billion unique requests a month.
					</p>
					<p>
						As a leader, I focus on execution, alignment with business objectives, and setting key results to help my team succeed. With my skills and experience in software engineering, I bring value to organizations looking to advance their digital initiatives.
					</p>
				</div>
			</section>
			<section>
				<h2 class="section-title">Education</h2>
				<div class="content">
					<p>B.A., Temple University 2012</p>
				</div>
			</section>
			<section>
				<h2 class="section-title">Skills</h2>
				<div class="">
					<!-- <p>officia unde omnis</p> -->
					<div class="grid grid-flow-row gap-4 auto-rows-fr">
					<!-- <div class="flex flex-row justify-between"> -->
							{Object.entries(newStructure).map(([domainKey, domainValue]) => (
								<div class="skill-card p-5 gap-2 flex flex-col">
									<div><h5>{domainKey}</h5></div>
									<div class="flex flex-row gap-8">
										{Object.entries(domainValue).map(([typeKey, typeValue]) => (
										<div class="">
											<strong>{typeKey}</strong>
											<ul>
												{typeValue.map((skill) => (
													<li>
														{skill.Skill}
												</li>
												))}
											</ul>
										</div>
								  ))}
									</div>
								</div>
							  ))}
					</div>
				</div>
			</section>
		</main>

		<ContactCTA />
	</div>
</BaseLayout>

<style>
	.about {
		display: flex;
		flex-direction: column;
		gap: 3.5rem;
	}

	img {
		margin-top: 1.5rem;
		border-radius: 1.5rem;
		box-shadow: var(--shadow-md);
	}

	section {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
		color: var(--gray-200);
	}

	.section-title {
		grid-column-start: 1;
		font-size: var(--text-xl);
		color: var(--gray-0);
	}

	.content {
		grid-column: 2 / 4;
	}

	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}
	.gallery {
			grid-area: gallery;
		}
	.skill-card {
		/* display: flex; */
		/* justify-content: space-around;
		align-items: flex-start;
		text-align: center;
		flex-wrap: wrap; */
		/* justify-content: center;
		align-items: center;
		text-align: center; */
		/* justify-content: flex-start;
		align-items: flex-start;
		text-align: start;
		flex-wrap: wrap; */
		border: 1px solid var(--gray-800);
		border-radius: 1.5rem;
		color: var(--gray-300);
		background: var(--gradient-subtle);
		box-shadow: var(--shadow-sm);
	}

	.skill-card .domain {
		width: 100%;
	}

	@media (min-width: 50em) {

	}
	@media (min-width: 50em) {
		.about {
			display: grid;
			grid-template-columns: 1fr 60% 1fr;
		}

		.about > :global(:first-child) {
			grid-column-start: 2;
		}

		section {
			display: contents;
			font-size: var(--text-lg);
		}
		.skill-card {
			border-radius: 1.5rem;
			height: 100%;
		}
	}
</style>
